* snippets
** yasnippet
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package yasnippet
       :diminish ""
       :ensure t
       :init
       (add-hook 'after-init-hook 'yas-global-mode)
       (setq-default yas-snippet-dirs
		     '("~/.emacs.d/snippets/yasnippet-snippets" ;; from AndreaCrotti/yasinppet-snippets
		       "~/my_snippets"                   ;; my own snippets
		       ))
       (setq-default yas-prompt-functions '(yas-completing-prompt))
       :config
       (setq yas-triggers-in-field t
	     yas-wrap-around-region t)
       (use-package helm-c-yasnippet
	 :ensure t
	 :config (setq helm-yas-space-match-any-greedy t)
	 :bind ("<print> n" . helm-yas-complete)))
   #+END_SRC

** snippets
   #+BEGIN_SRC emacs-lisp :results silent
     (add-to-list 'yas/root-directory "~/.emacs.d/snippets/yasnippet-snippets/snippets")
     (yas/initialize)
   #+END_SRC

* company
** company
   #+BEGIN_SRC emacs-lisp :results silent
     (defvar-local company-fci-mode-on-p nil)

     (defun company-turn-off-fci (&rest ignore)
       (when (boundp 'fci-mode)
	 (setq company-fci-mode-on-p fci-mode)
	 (when fci-mode (fci-mode -1))))

     (defun company-maybe-turn-on-fci (&rest ignore)
       (when company-fci-mode-on-p (fci-mode 1)))

     ;; (defun company-add-yasnippet-with-with-to-list (backend-list)
     ;;   (when backend-list (append '((car backend-list) :with
     ;; 			       company-yasnippet)
     ;; 			     (company-add-yasnippet-with-with-to-list
     ;; 			      (cdr backend-list)))))

     (use-package company
       :ensure t
       :diminish ""
       :config
       (setq company-minimum-prefix-length 0)
       (setq company-idle-delay 0.2)
       (add-hook 'after-init-hook 'global-company-mode)
       (add-hook 'company-completion-started-hook 'company-turn-off-fci)
       (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
       (add-hook 'company-completion-cancelled-hook
		 'company-maybe-turn-on-fci))
     (setq company-backends
	   '((company-jedi :with company-yasnippet)  (company-elisp :with company-yasnippet) company-capf company-bbdb (company-nxml :with
																     copmany-yasnippet)
	     (company-css :with company-yasnippet)
	     (company-eclim :with company-yasnippet) company-semantic company-clang company-xcode company-cmake company-capf company-files
	     (company-dabbrev-code company-gtags
				   company-etags
				   company-keywords :with company-yasnippet)
	     company-oddmuse company-dabbrev :with company-yasnippet))

     ;; (setq company-backends '((company-keywords
     ;; 			    ;; :with company-jedi
     ;; 			    ;; :with company-clang
     ;; 			    ;; :with company-abbrev
     ;; 			    ;; :with company-bbdb
     ;; 			    ;; :with company-cmake
     ;; 			    ;; :with company-css
     ;; 			    ;; :with company-eclim
     ;; 			    ;; :with company-elisp
     ;; 			    ;; :with company-etags
     ;; 			    ;; :with company-files
     ;; 			    ;; :with company-gtags
     ;; 			    ;; :with company-ispell
     ;; 			    ;; :with company-nxml
     ;; 			    ;; :with company-oddmuse
     ;; 			    ;; :with company-semantic
     ;; 			    :with company-yasnippet)
     ;; 			   ))

     ;;(global-set-key (kbd "<tab>") 'company-complete-selection)
   #+END_SRC
** statistics
   #+begin_src emacs-lisp :results silent
     (use-package company-statistics
       :ensure t
       :defer t
       :diminish ""
       :config (company-statistics-mode))
   #+end_src

* tags
  #+BEGIN_SRC emacs-lisp
    (use-package helm-gtags
      :ensure t)
  #+END_SRC
