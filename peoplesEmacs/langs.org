* PROG-MODE
  #+BEGIN_SRC emacs-lisp :results silent
    (defun prog-mode-hook-func ()
      "Function for prog mode."
      (diff-hl-mode t)
      (rainbow-delimiters-mode t)
      (ggtags-mode)
      (helm-gtags-mode)
      (semantic-mode)
					    ;(global-semantic-stickyfunc-mode t)
					    ;(global-semantic-idle-scheduler-mode t)
					    ;(global-semantic-idle-completions-mode t)
					    ;(global-semantic-idle-completions-mode t)
					    ;(global-semantic-highlight-edits-mode t)
      (flycheck-mode)
      (flyspell-prog-mode)
      (company-quickhelp-mode t)
      (auto-fill-mode)
      (aggressive-indent-mode))
    (add-hook 'prog-mode-hook #'prog-mode-hook-func)
    (setq-local eldoc-documentation-function #'ggtags-eldoc-function)
  #+END_SRC


* Text
** spelling
   #+begin_src emacs-lisp :results silent
     (global-set-key (kbd "<f8>") 'ispell-word)
     (global-set-key (kbd "<f12>") 'ispell-buffer)
     (global-set-key (kbd "C-<f12>") 'flyspell-buffer)
     (with-eval-after-load "ispell"
       (setq ispell-program-name "hunspell")
       (setq ispell-dictionary "english,german8")
       (ispell-set-spellchecker-params)
       (ispell-hunspell-add-multi-dic "english,german8"))
     (add-hook 'text-mode-hook 'flyspell-mode)
   #+end_src


* TEX
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package latex-preview-pane
       :ensure t)
     (use-package latex-math-preview
       :ensure t)
     (use-package tex
       :ensure auctex
       :mode ("\\.tex\\'" . TeX-mode)
       :config
       (setq TeX-auto-save t)
       (setq TeX-parse-self t)
       (setq-default TeX-master nil)
       (latex-preview-pane-enable)
       (setq-default TeX-electric-math '("$" "$"))
       (setq-default TeX-electric-sub-and-superscript t)
       (setq-default LaTeX-electric-left-right-brace t)

       (setq fill-column 120)
       (auto-fill-mode t)
       (autopair-mode -1)

					     ;(add-hook 'TeX-mode-hook #'tex-hook-func)
       )
   #+END_SRC



* LISP
** EMACS LIPS
*** IELM
    #+BEGIN_SRC emacs-lisp
      (defun ielm-hook-func ()
        "Function for the ielm."
        (eldoc-mode t)
        (paredit-mode t))
        (add-hook 'ielm-mode-hook #'ielm-hook-func)
    #+END_SRC

*** NOT-IELM
    #+BEGIN_SRC emacs-lisp
      (defun emacs-lisp-hook-func ()
	"Function for the emacs-lisp."
	(eldoc-mode t)
	(company-mode t)
	(paredit-mode t)
	(auto-compile-mode )
	(global-set-key (kbd "<f10>") 'edebug-set-breakpoint))
      (add-hook 'emacs-lisp-mode-hook #'emacs-lisp-hook-func)
    #+END_SRC


* BABEL
  #+BEGIN_SRC emacs-lips
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((maxima . t)
        (octave . t)
        (python . t)
        (haskell . t)))
  #+END_SRC


* Python
  #+begin_src emacs-lisp
    (use-package ob-python
      :ensure t)
    (use-package elpy
      :ensure t
      :diminish ""
      :config
					    ;(add-hook 'python-mode-hook 'elpy-mode)
      )
    (use-package py-autopep8
      :ensure t
      :diminish ""
      :config
					    ;(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
      )
					    ;(use-package ein
					    ;  :enable t
					    ; diminish "")



					    ;(elpy-enable)
					    ;(elpy-use-ipython)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					    ; python-mode
					    ;(setq py-install-directory "~/.emacs.d/python-mode-6.0.11")
					    ;(add-to-list 'load-path py-install-directory)
					    ;(require 'python-mode)

    (use-package ob-ipython
      :ensure t)
					    ; use IPython
					    ;(setq-default py-shell-name "ipython")
					    ;(setq-default py-which-bufname "IPython")
					    ; use the wx backend, for both mayavi and matplotlib
					    ;(setq py-python-command-args
					    ; '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
					    ;(setq py-force-py-shell-name-p t)

    ;; switch to the interpreter after executing code
					    ;(setq py-shell-switch-buffers-on-execute-p t)
					    ;(setq py-switch-buffers-on-execute-p t)
					    ; don't split windows
					    ;(setq py-split-windows-on-execute-p nil)
					    ; try to automagically figure out indentation
					    ;(setq py-smart-indentation t)
					    ;(with-output-to-temp-buffer "*IPython Completions*"
					    ; (display-completion-list
					    ;(all-completions pattern completions)))
    ;; (set-buffer "*IPython Completions*")
    ;; (switch-to-buffer "*IPython Completions*")
    ;; (goto-char (point-min))
    ;; (when
    ;;  (search-forward (car (all-completions pattern completions)))
    ;;  (forward-word -1)
    ;;  (delete-other-windows)
    ;;  (word-at-point))
					    ;)
					    ; pymacs
					    ;(add-to-list 'load-path "~/.emacs.d/pymacs-0.25")
					    ;(autoload 'pymacs-apply "pymacs")
					    ;(autoload 'pymacs-call "pymacs")
					    ;(autoload 'pymacs-eval "pymacs" nil t)
					    ;(autoload 'pymacs-exec "pymacs" nil t)
					    ;(autoload 'pymacs-load "pymacs" nil t)
					    ;(autoload 'pymacs-autoload "pymacs")

					    ; ropemacs
					    ;(require 'pymacs)
					    ;(pymacs-load "ropemacs" "rope-")
  #+end_src


* haskell

* FORTRAN

* Java

* Scala

* JS

* C/C++

* HTML

* maven

* Octave

* maxima

* Shell
** shell
** zsh


* Perl

* Pascal

* Ada

* vimscript

* php

* ruby

* clojure

* erlang

* go

* lua

* rust


* muttrc

* md - MarkDown

* adoc - asciidoc

* ansible
