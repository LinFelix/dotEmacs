#+TITLE: Sane defaults for Peoples Emacs

* Getting the really annoying things out of the way

** Make the prompting less annoying
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq vc-follow-symlinks t)
   #+END_SRC
   
** Disable those bars
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (menu-bar-mode 0)
     (setq initial-scratch-message nil)
   #+END_SRC
   
** Setting the encoding
   #+BEGIN_SRC emacs-lisp
     (set-default-coding-systems 'utf-8)
     (prefer-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (setq buffer-file-coding-system 'utf-8)
   #+END_SRC


* Packaging

** Packaging management
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-archives
           (quote
            (("gnu" . "https://elpa.gnu.org/packages/")
             ("melpa" . "https://melpa.org/packages/")
             ("marmalade" . "https://marmalade-repo.org/packages/"))))
     (package-initialize)
     ;(package-refresh-contents)
   #+END_SRC

   #+RESULTS:

** Get use-package
   #+BEGIN_SRC emacs-lisp
     (when (not (require 'use-package nil 'noerror))
           (package-refresh-contents)
           (package-install 'use-package))
   #+END_SRC


* Modes to be enables
** These should be on by default
  #+BEGIN_SRC emacs-lisp
    ;; ##  desktop-save-mode  ##############################################
    ;(desktop-save-mode t)
    ;; enables "C-x left/right" to go forth and back in window configuration
    (winner-mode t)
    ;; ##  save history  ################################################### 
    (savehist-mode t)
    ;; ##  save cursor spot  ###############################################
    (save-place-mode t)
    ;; ##  show parens  ####################################################
    (show-paren-mode t)

    (delete-selection-mode t)
  #+END_SRC

** recent files
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :diminish ""
       :ensure t
       :init (recentf-mode t)
       :config
       (add-to-list 'recentf-exclude "~/.emacs.d/games/*")
       (add-to-list 'recentf-exclude "~/.emacs.d/elpa/*")
       (add-to-list 'recentf-exclude "\\\*Org Src *.org\[ * \]\*"))
   #+END_SRC


* make Emacs not overwrite a bunch of things
  #+BEGIN_SRC emacs-lisp
    ;; cunstom kept getting in the way of my config so I took care of it
    (setq custom-file "~/customize")

    (let '(tmp_dir "~/cacheAndTmp/emacs_auto_save")
         '((setq backup-directory-alist
                 '((".*" . ,"~/cacheAndTmp/emacs_auto_save")))
           (setq auto-save-file-name-transforms
                 '((".*" ,tmp_dir)))
           (setq auto-save-list-file-prefix tmp_dir)))
  #+END_SRC


* Selection ... well, helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
    :diminish ""
    :ensure t
    :init (helm-mode 1)
    :config
      (setq helm-autoresize-mode 1)
      (setq helm-autoresize-min-height 0)
      (setq helm-autoresize-max-height 80)
      (setq-default helm-ff-file-name-history-use-recentf t)
      (setq-default helm-split-window-in-side-p t)
   :bind
     ("M-ö" . helm-M-x)
     ("C-x r b " . helm-filtered-bookmarks)
     ("C-ö C-f" . helm-find-files)
     ("C-x C-b" . helm-buffers-list)
     ("C-x b " . helm-for-files))
  #+END_SRC


* Project support
** projectile
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package projectile
       :ensure t
       :init (projectile-mode)
       :config
       (setq projectile-enable-caching t)
       (setq projectile-completion-system 'helm)
       (use-package helm-projectile
	 :ensure t
	 :init (helm-projectile-on)))
     (customize-set-variable 'projectile-mode-line '(:eval (format " P[%s]" (projectile-project-name))))
   #+END_SRC


* reasonabley common modes
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :diminish ""
       :ensure t
       :init (global-undo-tree-mode t)
       :config (setq-default undo-tree-visualizer-diff t
       	                     undo-tree-visualizer-timestamps t)
       :bind
         ("C-z" . undo-tree-undo)
         ("C-Z" . undo-tree-redo)
         ("C-x C-z" . undo-tree-visualize))
   #+END_SRC
** expand-region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :diminish ""
       :ensure t
       :bind ("C-@" . er/expand-region))
   #+END_SRC
** hideshow
   #+begin_src emacs-lisp
     (global-set-key (kbd "<C-tab>") 'hs-toggle-hiding)
     ;(global-set-key (kbd "<tab>") 'hs-toggle-hiding)
     (add-hook 'prog-mode-hook 'hs-minor-mode)
   #+end_src

** auto pair
   #+begin_src emacs-lisp
     (use-package autopair
       :ensure
       :diminish ""
       :config (autopair-global-mode))
   #+end_src


* keybindings
** elscreen
  #+begin_src emacs-lisp :results silent
    (use-package elscreen
      :ensure t
      :config
      (elscreen-start)
      (setq elscreen-display-tab nil)
      (global-set-key (kbd "<print> t") 'elscreen-toggle-display-tab)
      (global-set-key (kbd "<C-M-tab>") 'elscreen-next)
      (global-set-key (kbd "<print> <tab>") 'elscreen-next))
  #+end_src

** C-xcz
   #+begin_src emacs-lisp :results silent
     (global-set-key (kbd "C-ö") ctl-x-map)
     ;(global-set-key (kbd "C-ü") (kbd "C-z"))
     ;(global-set-key (kbd "C-ä") (lookup-key global-map (kbd "C-c")))
   #+end_src
** other keybindings
   #+begin_src emacs-lisp :results silent
     ;; (global-set-key (kbd "M-S-v") 'scroll-other-window)
     ;; aparently this function is mapped couple of times but does not exist
   #+end_src
